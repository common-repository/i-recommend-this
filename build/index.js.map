{"version":3,"file":"index.js","mappings":";;;;;;;;;;AAAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACsD;AACsD;AAC7C;AAChB;AACX;AAEpCA,oEAAiB,CAACQ,wCAAQ,EAAE;EACxB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,IAAIA,CAAC;IAAEC,UAAU;IAAEC;EAAc,CAAC,EAAE;IAChC,MAAM;MAAEC,MAAM;MAAEC;IAAU,CAAC,GAAGH,UAAU;IACxC,MAAMI,UAAU,GAAGb,sEAAa,CAAC;MAC7Bc,SAAS,EAAE,kBAAkBF,SAAS;IAC1C,CAAC,CAAC;;IAEF;IACAN,6DAAS,CAAC,MAAM;MACZ,IAAIK,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAKI,SAAS,EAAE;QACzCL,aAAa,CAAC;UAAEC,MAAM,EAAEK,EAAE,CAACC,IAAI,CAACC,MAAM,CAAC,aAAa,CAAC,CAACC,gBAAgB,CAAC;QAAE,CAAC,CAAC;MAC/E;IACJ,CAAC,EAAE,EAAE,CAAC;;IAEN;IACA,MAAMC,kBAAkB,GAAIC,KAAK,IAAK;MAClC,MAAMC,QAAQ,GAAGD,KAAK,KAAK,EAAE,GAAG,EAAE,GAAGE,QAAQ,CAACF,KAAK,EAAE,EAAE,CAAC;MACxDX,aAAa,CAAC;QAAEC,MAAM,EAAEW;MAAS,CAAC,CAAC;IACvC,CAAC;IAED,OACIE,oDAAA;MAAA,GAASX;IAAU,GACfW,oDAAA,CAACtB,kEAAa,QACVsB,oDAAA,CAACrB,qEAAgB;MACbkB,KAAK,EAAET,SAAU;MACjBa,QAAQ,EAAGC,QAAQ,IAAKhB,aAAa,CAAC;QAAEE,SAAS,EAAEc;MAAS,CAAC;IAAE,CAClE,CACU,CAAC,EAChBF,oDAAA,CAACvB,sEAAiB,QACduB,oDAAA,CAACpB,4DAAS;MAACuB,KAAK,EAAC;IAAU,GACvBH,oDAAA,CAACnB,8DAAW;MACRuB,KAAK,EAAC,SAAS;MACfP,KAAK,EAAEV,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAKI,SAAS,GAAG,EAAE,GAAGJ,MAAO;MAC7Dc,QAAQ,EAAEL;IAAmB,CAChC,CACM,CACI,CAAC,yBACD,EAACT,MAAM,EAAC,KAC1B,CAAC;EAEd,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIkB,IAAIA,CAAC;IAAEpB;EAAW,CAAC,EAAE;IACjB,MAAM;MAAEE,MAAM;MAAEC;IAAU,CAAC,GAAGH,UAAU;IACxC,MAAMI,UAAU,GAAGb,kEAAa,CAAC6B,IAAI,CAAC;MAClCf,SAAS,EAAE,kBAAkBF,SAAS;IAC1C,CAAC,CAAC;IACF,OACIY,oDAAA;MAAA,GAASX;IAAU,GAAE,uBACG,EAACF,MAAM,EAAC,KAC3B,CAAC;EAEd;AACJ,CAAC,CAAC,C","sources":["webpack://i-recommend-this/external window \"React\"","webpack://i-recommend-this/external window [\"wp\",\"blockEditor\"]","webpack://i-recommend-this/external window [\"wp\",\"blocks\"]","webpack://i-recommend-this/external window [\"wp\",\"components\"]","webpack://i-recommend-this/external window [\"wp\",\"element\"]","webpack://i-recommend-this/webpack/bootstrap","webpack://i-recommend-this/webpack/runtime/compat get default export","webpack://i-recommend-this/webpack/runtime/define property getters","webpack://i-recommend-this/webpack/runtime/hasOwnProperty shorthand","webpack://i-recommend-this/webpack/runtime/make namespace object","webpack://i-recommend-this/./src/index.js"],"sourcesContent":["module.exports = window[\"React\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"element\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Registers a new block provided a unique name and an object defining its behavior.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-registration/\n */\nimport { registerBlockType } from '@wordpress/blocks';\nimport { useBlockProps, InspectorControls, BlockControls, AlignmentToolbar } from '@wordpress/block-editor';\nimport { PanelBody, TextControl } from '@wordpress/components';\nimport { useEffect } from '@wordpress/element';\nimport metadata from './block.json';\n\nregisterBlockType(metadata, {\n    /**\n     * The edit function describes the structure of your block in the context of the editor.\n     * This represents what the editor will render when the block is used.\n     *\n     * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/\n     *\n     * @param {Object} props            Block properties.\n     * @param {Object} props.attributes Block attributes.\n     * @param {Function} props.setAttributes Function to update block attributes.\n     * @return {WPElement} Element to render.\n     */\n    edit({ attributes, setAttributes }) {\n        const { postId, alignText } = attributes;\n        const blockProps = useBlockProps({\n            className: `has-text-align-${alignText}`\n        });\n\n        // Set the default post ID to current post ID if not already set\n        useEffect(() => {\n            if (postId === null || postId === undefined) {\n                setAttributes({ postId: wp.data.select('core/editor').getCurrentPostId() });\n            }\n        }, []);\n\n        // Function to handle changes in the Post ID input\n        const handlePostIdChange = (value) => {\n            const newValue = value === '' ? '' : parseInt(value, 10);\n            setAttributes({ postId: newValue });\n        };\n\n        return (\n            <div {...blockProps}>\n                <BlockControls>\n                    <AlignmentToolbar\n                        value={alignText}\n                        onChange={(newAlign) => setAttributes({ alignText: newAlign })}\n                    />\n                </BlockControls>\n                <InspectorControls>\n                    <PanelBody title=\"Settings\">\n                        <TextControl\n                            label=\"Post ID\"\n                            value={postId === null || postId === undefined ? '' : postId}\n                            onChange={handlePostIdChange}\n                        />\n                    </PanelBody>\n                </InspectorControls>\n               [irecommendthis id=\"{postId}\"]\n            </div>\n        );\n    },\n\n    /**\n     * The save function defines the way in which the different attributes should be combined\n     * into the final markup, which is then serialized by the block editor into `post_content`.\n     *\n     * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/\n     *\n     * @param {Object} props            Block properties.\n     * @param {Object} props.attributes Block attributes.\n     * @return {WPElement} Element to render.\n     */\n    save({ attributes }) {\n        const { postId, alignText } = attributes;\n        const blockProps = useBlockProps.save({\n            className: `has-text-align-${alignText}`\n        });\n        return (\n            <div {...blockProps}>\n                [irecommendthis id=\"{postId}\"]\n            </div>\n        );\n    }\n});\n"],"names":["registerBlockType","useBlockProps","InspectorControls","BlockControls","AlignmentToolbar","PanelBody","TextControl","useEffect","metadata","edit","attributes","setAttributes","postId","alignText","blockProps","className","undefined","wp","data","select","getCurrentPostId","handlePostIdChange","value","newValue","parseInt","createElement","onChange","newAlign","title","label","save"],"sourceRoot":""}